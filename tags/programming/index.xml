<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on</title><link>https://sethmb.xyz/tags/programming/</link><description>Recent content in programming on</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><atom:link href="https://sethmb.xyz/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Building Blocks</title><link>https://sethmb.xyz/sixth/CompSci/Programming/BuildingBlocks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sethmb.xyz/sixth/CompSci/Programming/BuildingBlocks/</guid><description>An algorithm is an unambiguous, repeatable set of instructions that can be followed to complete a given task in a finite time.</description></item><item><title>Graphs</title><link>https://sethmb.xyz/sixth/CompSci/Programming/Graphs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sethmb.xyz/sixth/CompSci/Programming/Graphs/</guid><description>![[sixth/CompSci/Programming/img/Pasted image 20230628115431.png]]
Graphs are used to represent data visually. They require relations between the data.
Circles or nodes are called vertices and the lines between them are called edges.</description></item><item><title>Literals, Variables and Constants</title><link>https://sethmb.xyz/sixth/CompSci/Programming/LiteralsVariablesConstants/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sethmb.xyz/sixth/CompSci/Programming/LiteralsVariablesConstants/</guid><description>Literals A literal is a directly defined value. &amp;quot;25&amp;quot; is a literal. So is true
In Python, this is an example of a literal:</description></item><item><title>Modules</title><link>https://sethmb.xyz/sixth/CompSci/Programming/Modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sethmb.xyz/sixth/CompSci/Programming/Modules/</guid><description>Importing a module Using the import keyword, you can bring a module into your code. You can then call any subroutines included within that module, in your code.</description></item><item><title>Recursion</title><link>https://sethmb.xyz/sixth/CompSci/Programming/Recursion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sethmb.xyz/sixth/CompSci/Programming/Recursion/</guid><description>Recursion—Defining a subroutine in terms of itself. The subroutine calls itself.
Recursion ≠ iteration
Danger: the call stack may be exhausted</description></item><item><title>Subroutines</title><link>https://sethmb.xyz/sixth/CompSci/Programming/Subroutines/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sethmb.xyz/sixth/CompSci/Programming/Subroutines/</guid><description>Instead of writing a huge, monolithic piece of code, you can break a program down into smaller pieces, called subroutines. These allow for increased modularity in an application.</description></item><item><title>Values, Expressions and Statements</title><link>https://sethmb.xyz/sixth/CompSci/Programming/ValuesExpressionsAndStatements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://sethmb.xyz/sixth/CompSci/Programming/ValuesExpressionsAndStatements/</guid><description>Value A value is a single piece of data. It can be used as a literal or stored in a variable.</description></item></channel></rss>